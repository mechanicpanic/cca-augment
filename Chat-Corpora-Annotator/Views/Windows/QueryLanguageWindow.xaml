<Window x:Class="ChatCorporaAnnotator.Views.Windows.QueryLanguageWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:models="clr-namespace:ChatCorporaAnnotator.Models.Suggester"
        xmlns:b="clr-namespace:ChatCorporaAnnotator.Infrastructure.Behaviors.Static"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:fa="http://schemas.fontawesome.com/icons/"
        mc:Ignorable="d"
        Icon="/Resources/Icons/MainWindowIcon.png"
        Title="Run Matcher"
        Width="800" Height="450"
        MinWidth="725" MinHeight="400">

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closed">
            <i:InvokeCommandAction PassEventArgsToCommand="True" Command="{Binding DeactivateWindowCommand}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction PassEventArgsToCommand="True" Command="{Binding EndTasksCommand}"/>
            <i:InvokeCommandAction PassEventArgsToCommand="True" Command="{Binding SaveUserDictionaryCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <UniformGrid Background="AliceBlue">
        <Grid Margin="0, 5, 5, 5">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="5"/>
                <RowDefinition Height="25"/>
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="400"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="2*" MinWidth="300"/>
            </Grid.ColumnDefinitions>

            <GridSplitter
                Grid.Column="1"
                Width="3">
            </GridSplitter>

            <Grid Grid.Row="0" Grid.Column="0">
                <Grid.Resources>
                    <Style TargetType="Button" x:Key="RedButton" BasedOn="{StaticResource GhostRedBorderButton}">
                        <Setter Property="Margin" Value="5, 0, 0, 5"/>
                        <Setter Property="FontFamily" Value="Consolas"/>
                    </Style>

                    <Style TargetType="Button" x:Key="GreenButton" BasedOn="{StaticResource GhostGreenBorderButton}">
                        <Setter Property="Margin" Value="5, 0, 0, 5"/>
                        <Setter Property="FontFamily" Value="Consolas"/>
                    </Style>

                    <Style TargetType="Button" x:Key="BlueButton" BasedOn="{StaticResource GhostBlueBorderButton}">
                        <Setter Property="Margin" Value="5, 0, 0, 5"/>
                        <Setter Property="FontFamily" Value="Consolas"/>
                    </Style>

                    <Style TargetType="Button" BasedOn="{StaticResource BlueCircleButton}">
                        <Setter Property="Margin" Value="5, 0, 0, 5"/>
                    </Style>
                </Grid.Resources>

                <Grid.RowDefinitions>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="120"/>
                    <RowDefinition Height="32"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1.5*"/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>

                    <Button Name="SelectBtn"
                            Grid.Column="0"
                            Content="select"
                            Style="{StaticResource RedButton}"
                            Background="{Binding SelectBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=SelectBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="AndBtn"
                            Grid.Column="1"
                            Content="and"
                            Style="{StaticResource RedButton}"
                            Background="{Binding AndBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=AndBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="OrBtn"
                            Grid.Column="2"
                            Content="or"
                            Style="{StaticResource RedButton}"
                            Background="{Binding OrBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=OrBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="NotBtn"
                            Grid.Column="3"
                            Content="not"
                            Style="{StaticResource RedButton}"
                            Background="{Binding NotBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=NotBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="NumBtn"
                            Grid.Column="4"
                            Content="num"
                            Style="{StaticResource GreenButton}"
                            Background="{Binding NumBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=NumBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="CommaBtn"
                            Grid.Column="5"
                            Content=","
                            Style="{StaticResource GreenButton}"
                            Background="{Binding CommaBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=CommaBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="SemicolonBtn"
                            Grid.Column="6"
                            Content=";"
                            Style="{StaticResource GreenButton}"
                            Background="{Binding SemicolonBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=SemicolonBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="LeftBracketBtn"
                            Grid.Column="7"
                            Content="("
                            Style="{StaticResource GreenButton}"
                            Background="{Binding LeftBracketBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=LeftBracketBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="RightBracketBtn"
                            Grid.Column="8"
                            Content=")"
                            Style="{StaticResource GreenButton}"
                            Background="{Binding RightBracketBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=RightBracketBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                </Grid>

                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>

                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <Button Name="HasWordOfDictBtn"
                            Grid.Row="0"
                            Grid.Column="0"
                            Content="haswordofdict()"
                            Style="{StaticResource BlueButton}"
                            Background="{Binding HasWordOfDictBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=HasWordOfDictBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="HasUserMentionedBtn"
                            Grid.Row="1"
                            Grid.Column="0"
                            Content="hasusermentioned()"
                            Style="{StaticResource BlueButton}"
                            Background="{Binding HasUserMentionedBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=HasUserMentionedBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="ByUserBtn"
                            Grid.Row="2"
                            Grid.Column="0"
                            Content="byuser()"
                            Style="{StaticResource BlueButton}"
                            Background="{Binding ByUserBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=ByUserBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="InwinBtn"
                            Grid.Row="3"
                            Grid.Column="0"
                            Content="inwin"
                            Style="{StaticResource BlueButton}"
                            Background="{Binding InwinBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=InwinBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="HasOrganizationBtn"
                            Grid.Row="0"
                            Grid.Column="1"
                            Content="hasorganization()"
                            Style="{StaticResource BlueButton}"
                            Background="{Binding HasOrganizationBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=HasOrganizationBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="HasTimeBtn"
                            Grid.Row="1"
                            Grid.Column="1"
                            Content="hastime()"
                            Style="{StaticResource BlueButton}"
                            Background="{Binding HasTimeBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=HasTimeBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="HasLocationBtn"
                            Grid.Row="2"
                            Grid.Column="1"
                            Content="haslocation()"
                            Style="{StaticResource BlueButton}"
                            Background="{Binding HasLocationBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=HasLocationBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <Button Name="HasDateBtn"
                            Grid.Row="3"
                            Grid.Column="1"
                            Content="hasdate()"
                            Style="{StaticResource BlueButton}"
                            Background="{Binding HasDateBtnBackground}">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction
                                    CommandParameter="{Binding ElementName=HasDateBtn}"
                                    Command="{Binding DragButtonCommand}">
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                </Grid>

                <Grid Grid.Row="2">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>

                    <Button
                        Grid.Column="0"
                        Content="Switch mode"
                        Command="{Binding SwitchModeCommand}">
                    </Button>
                    
                    <Button
                        Grid.Column="1"
                        Content="Import queries"
                        Command="{Binding ImportQueriesCommand}">
                    </Button>
                    
                    <Button
                        Grid.Column="2"
                        Content="Edit dict"
                        Command="{Binding SwitchDictionaryEditorVisibilityCommand}">
                    </Button>
                </Grid>

                <Grid Grid.Row="3" Margin="5, 0, 0, 0">
                    <Grid.Resources>
                        <Style TargetType="DataGrid" BasedOn="{StaticResource BlueGlassDataGrid}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=DictionaryEditorPanel, Path=Visibility}" Value="Visible">
                                    <Setter Property="BorderThickness" Value="0"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Resources>

                    <DataGrid AutoGenerateColumns="False" ItemsSource="{Binding UserDictionary}">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Name" Binding="{Binding Path=Name}"/>
                            <DataGridTextColumn Header="Content" Binding="{Binding Path=Content}"/>
                        </DataGrid.Columns>
                    </DataGrid>

                    <Border BorderBrush="Gray" BorderThickness="1" Visibility="{Binding ImportQueriesPanelVisibility}">
                        <DockPanel Background="White">
                            <TextBlock
                                Text="Imported queries"
                                Style="{StaticResource ListTitleTextBlock}">
                            </TextBlock>

                            <ListBox BorderThickness="0"
                                     HorizontalContentAlignment="Stretch"
                                     ItemsSource="{Binding ImportedQueries}"
                                     SelectedItem="{Binding SelectedImportedQuery}">

                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseDoubleClick">
                                        <i:InvokeCommandAction PassEventArgsToCommand="True" Command="{Binding LoadImportedQueryCommand}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>

                                <ListBox.InputBindings>
                                    <KeyBinding Key="Enter" Command="{Binding LoadImportedQueryCommand}"/>
                                    <KeyBinding Key="Delete" Command="{Binding RemoveImportedQueryCommand}"/>
                                    <KeyBinding Key="Delete" Modifiers="Alt" Command="{Binding RemoveAllImportedQueriesCommand}"/>
                                </ListBox.InputBindings>

                                <ListBox.ItemTemplate>
                                    <DataTemplate DataType="{x:Type models:ImportedQuery}">
                                        <TextBlock Text="{Binding Presenter}">
                                            <TextBlock.ToolTip>
                                                <TextBlock FontSize="12" Text="{Binding Content}"/>
                                            </TextBlock.ToolTip>
                                        </TextBlock>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>

                        </DockPanel>
                    </Border>

                    <Button Width="18"
                            Height="18"
                            Margin="0, 5, 5, 0"
                            VerticalAlignment="Top"
                            HorizontalAlignment="Right"
                            Style="{StaticResource BlueCircleButton}"
                            Command="{Binding SwitchImportQueriesPanelVisibilityCommand}">

                        <fa:ImageAwesome
                            Icon="Solid_SyncAlt"
                            Margin="2">
                        </fa:ImageAwesome>
                    </Button>
                    
                </Grid>
                
            </Grid>

            <DockPanel Name="DictionaryEditorPanel"
                       Grid.Row="0"
                       Grid.Column="0"
                       Margin="5, 0, 0, 0"
                       Background="AliceBlue"
                       Visibility="{Binding DictionaryEditorPanelVisibility}">

                <DockPanel DockPanel.Dock="Top" Height="27">
                    <TextBlock DockPanel.Dock="Left" Text="Dictionary item" Width="auto"/>
                    <Button DockPanel.Dock="Right" Content="Remove" Width="90" Style="{StaticResource BlueCircleButton}" Command="{Binding RemoveDictItemCommand}"/>

                    <ComboBox FontSize="11" Margin="5, 0" SelectedItem="{Binding SelectedUserDictItem}" ItemsSource="{Binding UserDictionary}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate DataType="{x:Type models:UserDictionaryItem}">
                                <TextBlock Text="{Binding Name}"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </DockPanel>

                <Grid DockPanel.Dock="Bottom" Height="27" Margin="0, 8, 0, 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="90"/>
                        <ColumnDefinition Width="5"/>
                        <ColumnDefinition Width="90"/>
                        <ColumnDefinition Width="5"/>
                        <ColumnDefinition Width="90"/>
                        <ColumnDefinition Width="5"/>
                        <ColumnDefinition Width="90"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>

                    <Button Grid.Column="1" Content="Add item" Style="{StaticResource BlueCircleButton}" Command="{Binding AddUserDictItemCommand}"/>
                    <Button Grid.Column="3" Content="Add word" Style="{StaticResource BlueCircleButton}" Command="{Binding AddWordToUserDictItemCommand}"/>
                    <Button Grid.Column="5" Content="Del word" Style="{StaticResource BlueCircleButton}" Command="{Binding RemoveWordFromUserDictItemCommand}"/>
                    <Button Grid.Column="7" Content="Hide" Style="{StaticResource BlueCircleButton}" Command="{Binding SwitchDictionaryEditorVisibilityCommand}"/>
                </Grid>

                <TextBox DockPanel.Dock="Bottom" Height="28" Text="{Binding DictEditorConsoleText, UpdateSourceTrigger=PropertyChanged}">
                    <TextBox.InputBindings>
                        <KeyBinding Key="Enter" Command="{Binding AddWordToUserDictItemCommand}"/>
                        <KeyBinding Key="Enter" Modifiers="Ctrl" Command="{Binding AddUserDictItemCommand}"/>
                    </TextBox.InputBindings>
                </TextBox>

                <Border BorderBrush="Gray" BorderThickness="1" Margin="0, 5, 0, 5">
                    <Grid>
                        <DockPanel Background="White">
                            <TextBlock
                                Text="Words"
                                Style="{StaticResource ListTitleTextBlock}">
                            </TextBlock>

                            <ListBox BorderThickness="0"
                                     HorizontalContentAlignment="Stretch"
                                     ItemsSource="{Binding CurrentUserDictItemWords}"
                                     SelectedItem="{Binding SelectedUserDictItemWord}">

                                <ListBox.InputBindings>
                                    <KeyBinding Key="Delete" Command="{Binding RemoveWordFromUserDictItemCommand}"/>
                                </ListBox.InputBindings>
                            </ListBox>

                        </DockPanel>

                        <Button Width="18"
                                Height="18"
                                Margin="0, 5, 5, 0"
                                VerticalAlignment="Top"
                                HorizontalAlignment="Right"
                                Style="{StaticResource BlueCircleButton}"
                                Command="{Binding ImportUserDictionaryCommand}">

                            <fa:ImageAwesome
                                Icon="Solid_FileDownload"
                                Margin="2">
                            </fa:ImageAwesome>
                        </Button>
                        
                    </Grid>
                </Border>
                
            </DockPanel>

            <Grid Grid.Row="0" Grid.Column="2">
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=DictionaryEditorPanel, Path=Visibility}" Value="Visible">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                
                <Grid.RowDefinitions>
                    <RowDefinition Height="32"/>
                    <RowDefinition MinHeight="100"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="2*" MinHeight="100"/>
                </Grid.RowDefinitions>

                <Grid Grid.Row="0" Margin="0, 0, 0, 5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="5"/>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="5"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>

                    <Button
                        Grid.Column="0"
                        Content="Clear"
                        Style="{StaticResource OrangeCircleButton}"
                        Command="{Binding ClearQueryCommand}">
                    </Button>

                    <Button
                        Grid.Column="2"
                        Content="Options"
                        Style="{StaticResource BlueCircleButton}"
                        Command="{Binding SwitchOptionsPanelVisibilityCommand}">
                    </Button>

                    <Button
                        Grid.Column="4"
                        Content="Run query"
                        Style="{StaticResource GreenCircleButton}"
                        Command="{Binding RunQueryCommand}">
                    </Button>
                </Grid>

                <Grid Grid.Row="1">

                    <Border Grid.Column="2" BorderThickness="1" BorderBrush="Gray">
                        <ItemsControl ItemsSource="{Binding QueryItems}">

                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>

                                    <WrapPanel Background="#FFFCF3FF" AllowDrop="True">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Drop">
                                                <i:InvokeCommandAction
                                                    PassEventArgsToCommand="True"
                                                    Command="{Binding WrapPanelTakeDropCommand}">
                                                </i:InvokeCommandAction>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </WrapPanel>

                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>

                            <ItemsControl.Template>
                                <ControlTemplate>
                                    <ScrollViewer VerticalScrollBarVisibility="auto">
                                        <ItemsPresenter/>
                                    </ScrollViewer>
                                </ControlTemplate>
                            </ItemsControl.Template>

                        </ItemsControl>
                    </Border>

                    <Popup
                        StaysOpen="False"
                        Placement="Mouse"
                        IsOpen="{Binding IsQueryItemPopupOpen}"
                        Child="{Binding QueryItemPopupChild}">
                    </Popup>

                    <TextBox
                        AcceptsTab="True"
                        Text="{Binding QueryText, UpdateSourceTrigger=PropertyChanged}"   
                        Visibility="{Binding QueryTextBoxVisibility}"
                        Style="{StaticResource MultilineTextBox}">
                    </TextBox>

                    <Border BorderThickness="1" BorderBrush="Gray" Background="FloralWhite" Visibility="{Binding QueryOptionsPanelVisibility}">
                        <StackPanel Orientation="Vertical" Margin="5">
                            <CheckBox
                                Content="unordered restrictions mode"
                                Style="{StaticResource BoldPressingCheckBox}"
                                IsChecked="{Binding IsUnorderedRestrictionsModeChecked}">
                            </CheckBox>
                        </StackPanel>
                    </Border>

                    <Border BorderThickness="1" BorderBrush="Gray" Background="FloralWhite" Visibility="{Binding QueryExecutionWaitingPanelVisibility}">
                        <fa:ImageAwesome
                            Height="60"
                            SpinDuration="6"
                            Icon="Solid_SyncAlt"
                            Spin="{Binding IsQueryExecutionWaitingIconSpinActive}">
                        </fa:ImageAwesome>
                    </Border>
                </Grid>

                <GridSplitter
                    Grid.Row="2"
                    Height="3">
                </GridSplitter>

                <DataGrid Name="MessagesDataGrid"
                          Grid.Row="3"
                          IsReadOnly="True"
                          Background="White"
                          MinRowHeight="3"
                          MinColumnWidth="50"
                          MaxColumnWidth="500"
                          SelectionUnit="FullRow"
                          SelectionMode="Extended"
                          GridLinesVisibility="None"
                          AutoGenerateColumns="False"  
                          b:DataGridColumnsBehavior.BindableColumns="{Binding MessageContainerColumns}"
                          ItemsSource="{Binding CurrentGroupMessages}">

                    <DataGrid.Resources>
                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#FF26A0DA"/>
                    </DataGrid.Resources>

                    <DataGrid.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="BorderThickness" Value="0"/>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground" Value="Black"/>
                                    <Setter Property="Background" Value="#FFCBE8F6"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.CellStyle>

                    <DataGrid.RowStyle>
                        <Style TargetType="DataGridRow">
                            <Setter Property="Background" Value="{Binding BackgroundBrush}"/>
                            <EventSetter Event="MouseDoubleClick" Handler="MessagesDataGridRow_MouseDoubleClick"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderThickness" Value="1"/>
                                    <Setter Property="BorderBrush" Value="#FF70C0E7"/>
                                    <Setter Property="Background" Value="#FFE5F3FB"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.RowStyle>
                    
                </DataGrid>
                
            </Grid>

            <StackPanel Grid.Row="2" Grid.Column="0" Orientation="Horizontal">
                <StackPanel.Resources>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource DefaultTextBlock}">
                        <Setter Property="FontSize" Value="13"/>
                        <Setter Property="Margin" Value="5, 0"/>
                    </Style>
                </StackPanel.Resources>
                
                <TextBlock>
                    <Run Text="Found suggestions:"/>
                    <Run Text="{Binding FoundSuggestionsCount, Mode=OneWay}"/>
                </TextBlock>
                
                <TextBlock>
                    <Run Text="Found groups:"/>
                    <Run Text="{Binding FoundGroupsCount, Mode=OneWay}"/>
                </TextBlock>

                <TextBlock>
                    <Run Text="Suggestion:"/>
                    <Run Text="{Binding CurrentSuggestionIndex, Mode=OneWay}"/>
                    <Run Text="/"/>
                    <Run Text="{Binding SuggestionsCount, Mode=OneWay}"/>
                </TextBlock>
            </StackPanel>

            <Grid Grid.Row="2" Grid.Column="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <Button
                    Grid.Column="0"
                    Content="ᐸ  Previous suggestion"
                    Style="{StaticResource GhostButton}"
                    Command="{Binding ShowPreviousSuggestionCommand}">
                </Button>

                <Button
                    Grid.Column="1"
                    Content="Next suggestion  ᐳ"
                    Style="{StaticResource GhostButton}"
                    Command="{Binding ShowNextSuggestionCommand}">
                </Button>
            </Grid>

        </Grid>
        
    </UniformGrid>
    
</Window>
